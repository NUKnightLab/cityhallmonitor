domain: "{{ project_name }}.knilab.com"
staticbucket: "media.knilab.com/{{ project_name }}"
gunicorn_reload: True # generally True on staging only
ssl:
  ssl_certificate: /etc/nginx/ssl/knilab/knilab-bundle.crt
  ssl_certificate_key: /etc/nginx/ssl/knilab/knilab-com.key

init_env_stg:
  ALLOWED_HOSTS: "cityhallmonitor.knilab.com"
  STATIC_URL: '//media.knilab.com/cityhallmonitor/'
  DEFAULT_DB_ENGINE: 'django.db.backends.postgresql_psycopg2'
  DEFAULT_DB_NAME: 'cityhallmonitor_{{ env }}'
  DEFAULT_DB_USER: '{{ vault_default_db_user }}'
  DEFAULT_DB_PASSWORD: '{{ vault_default_db_password }}'
  DEFAULT_DB_HOST: 'rds-pgis.knilab.com'
  DEFAULT_DB_PORT: '5432'

# env vars can be put into init_env (the upstart config) or wsgi_env (the wsgi
# file). Django projects need them in the wsgi file in order for databse
# migration to work.
#
# Ok, well, setting envs in the wsgi file doesn't work either (migrate does
# not use a web server, thus no wsgi). Seems like what we need to do is to
# set the variables in the virtualenv or load them up in the manage.py file
#
# Note: now back to init_env with attempt to load env vars from the
# upstart config file in a modified manage.py
init_env: "{{ init_env_common|combine(init_env_stg) }}"
